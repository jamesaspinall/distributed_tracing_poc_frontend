{"version":3,"sources":["store/actions/employees.ts","components/Table/TableRow.tsx","components/Table/TableBody.tsx","components/Table/TableHead.tsx","components/Table/Table.tsx","components/Form/Form.tsx","store/actions/form.ts","App.tsx","reportWebVitals.ts","store/reducers/employees.ts","store/reducers/form.ts","store/reducers/index.ts","store/index.ts","index.tsx"],"names":["addEmployee","firstname","lastname","email","dispatch","getState","type","payload","connect","state","employees","dispatchRemoveEmployee","index","removeEmployee","data","map","onClick","style","paddingLeft","color","fontWeight","cursor","TableBody","bodydata","TableHead","headings","tableData","get","length","dispatchAddEmployee","dispatchSetFirstName","action","setFirstName","dispatchSetLastName","setLastName","dispatchSetEmail","setEmail","useState","employee","setEmployee","handleChange","event","value","target","name","onSubmit","preventDefault","className","onChange","onBlur","e","marginBottom","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","reducer","slice","combineReducers","form","middlewares","push","thunk","store","createStore","rootReducer","compose","applyMiddleware","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b51a8d53.chunk.js","sourcesContent":["export const addEmployee = (\n  firstname: string,\n  lastname: string,\n  email: string\n) => (dispatch: any, getState: any) => {\n  return dispatch({\n    type: \"ADD_EMPLOYEE\",\n    payload: { firstname: firstname, lastname: lastname, email: email },\n  });\n};\n\nexport const removeEmployee = (index: number) => (\n  dispatch: any,\n  getState: any\n) => {\n  return dispatch({\n    type: \"REMOVE_EMPLOYEE\",\n    payload: index,\n  });\n};\n","import React from \"react\";\nimport { removeEmployee } from \"../../store/actions\";\nimport { connect } from \"react-redux\";\nconst TableRow = ({ data, dispatchRemoveEmployee }: any) => {\n  return (\n    <>\n      {data &&\n        data.map((data: any, index: any) => (\n          <tr key={index}>\n            <td>{data.firstname}</td>\n            <td>{data.lastname}</td>\n            <td>{data.email}</td>\n            <td\n              onClick={() => {\n                dispatchRemoveEmployee(index);\n              }}\n              style={{\n                paddingLeft: 10,\n                color: \"red\",\n                fontWeight: 900,\n                cursor: \"pointer\",\n              }}\n            >\n              X\n            </td>\n          </tr>\n        ))}\n    </>\n  );\n};\n\nconst mapStateToProps = (state: any) => ({\n  state: state,\n  employees: state.employees,\n});\n\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    dispatchRemoveEmployee: (index: number) => dispatch(removeEmployee(index)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TableRow);\n","import React from \"react\";\nimport TableRow from \"./TableRow\";\nconst TableBody = ({ bodydata }: any) => {\n  return (\n    <>\n      <tbody>\n        <TableRow data={bodydata} />\n      </tbody>\n    </>\n  );\n};\n\nexport default TableBody;\n","import React, { FC } from \"react\";\n\nconst TableHead: FC<any> = ({ headings }) => {\n  return (\n    <>\n      <thead>\n        <tr>\n          {/* {headings &&\n            Object.keys(headings[0]).map((key) => <th key={key}>{key}</th>)} */}\n          <th>First Name</th>\n          <th>Last Name</th>\n          <th>Email</th>\n        </tr>\n      </thead>\n    </>\n  );\n};\n\nexport default TableHead;\n","import React, { FC } from \"react\";\nimport TableBody from \"./TableBody\";\nimport TableHead from \"./TableHead\";\nimport { connect } from \"react-redux\";\nimport { get } from \"lodash\";\nexport const data = [\n  { Firstname: \"James\", Lastname: \"Aspinall\", Email: \"aspin@me.com\" },\n  { Firstname: \"Kylie\", Lastname: \"Aspinall\", Email: \"kylie@me.com\" },\n  { Firstname: \"Cooper\", Lastname: \"Aspinall\", Email: \"woof@me.com\" },\n];\n\nconst Table: FC = ({ employees }: any) => {\n  const tableData = get(employees, \"employees\", []);\n\n  return (\n    <>\n      {tableData.length === 0 ? (\n        <p>No employees added. Use the form below to get started.</p>\n      ) : (\n        <table>\n          <TableHead headings={tableData} />\n          <TableBody bodydata={tableData} />\n        </table>\n      )}\n    </>\n  );\n};\n\nconst mapStateToProps = (state: any) => ({\n  state: state,\n  employees: state.employees,\n});\n\n// const mapDispatchToProps = (dispatch: any) => {\n//   return {\n//     dispatchAddEmployee: (firstname: string, lastname: string, email: string) =>\n//       dispatch(addEmployee(firstname, lastname, email)),\n//   };\n// };\n\nexport default connect(mapStateToProps)(Table);\n","import React, { useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport {\n  addEmployee,\n  setFirstName,\n  setLastName,\n  setEmail,\n} from \"../../store/actions\";\nconst Form = ({\n  dispatchAddEmployee,\n  dispatchSetFirstName,\n  dispatchSetLastName,\n  dispatchSetEmail,\n}: any) => {\n  const handleSubmit = (event: any) => {\n    event.preventDefault();\n    dispatchAddEmployee(employee.firstname, employee.lastname, employee.email);\n    setEmployee({\n      firstname: \"\",\n      lastname: \"\",\n      email: \"\",\n    });\n  };\n  const [employee, setEmployee] = useState({\n    firstname: \"\",\n    lastname: \"\",\n    email: \"\",\n  });\n\n  const handleChange = (event: any) => {\n    const value = event.target.value;\n\n    setEmployee({\n      ...employee,\n      [event.target.name]: value,\n    });\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <div className=\"flex_input\">\n        <p>First Name</p>\n        <input\n          name=\"firstname\"\n          value={employee.firstname}\n          type=\"text\"\n          onChange={handleChange}\n          onBlur={(e) => dispatchSetFirstName(e.target.value)}\n        />\n      </div>\n      <div className=\"flex_input\">\n        <p>Last Name</p>\n        <input\n          name=\"lastname\"\n          value={employee.lastname}\n          type=\"text\"\n          onChange={handleChange}\n          onBlur={(e) => dispatchSetLastName(e.target.value)}\n        />\n      </div>\n      <div className=\"flex_input\">\n        <p>Email</p>\n        <input\n          name=\"email\"\n          value={employee.email}\n          type=\"email\"\n          onChange={handleChange}\n          onBlur={(e) => dispatchSetEmail(e.target.value)}\n        />\n      </div>\n      <button className=\"submit_button\" type=\"submit\">\n        Add Employee\n      </button>\n    </form>\n  );\n};\nconst mapStateToProps = (state: any) => ({\n  state: state,\n  employees: state.employees,\n});\n\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    dispatchAddEmployee: (firstname: string, lastname: string, email: string) =>\n      dispatch(addEmployee(firstname, lastname, email)),\n\n    dispatchSetFirstName: (firstname: string) =>\n      dispatch(setFirstName(firstname)),\n\n    dispatchSetLastName: (lastname: string) => dispatch(setLastName(lastname)),\n\n    dispatchSetEmail: (email: string) => dispatch(setEmail(email)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Form);\n","export const setFirstName = (firstname: string) => (\n  dispatch: any,\n  getState: any\n) => {\n  return dispatch({\n    type: \"SET_FIRSTNAME\",\n    action: firstname,\n  });\n};\nexport const setLastName = (lastname: string) => (\n  dispatch: any,\n  getState: any\n) => {\n  return dispatch({\n    type: \"SET_LASTNAME\",\n    action: lastname,\n  });\n};\nexport const setEmail = (email: string) => (dispatch: any, getState: any) => {\n  return dispatch({\n    type: \"SET_EMAIL\",\n    action: email,\n  });\n};\n","import \"./App.css\";\nimport { connect } from \"react-redux\";\nimport { Table } from \"./components/Table\";\nimport Form from \"./components/Form/Form\";\nimport { addEmployee } from \"./store/actions\";\nfunction App({ employees, dispatchAddEmployee }: any) {\n  return (\n    <div className=\"App\">\n      <h1 style={{ marginBottom: 10 }}>Distributed Tracing POC</h1>\n      <Table />\n      <Form />\n    </div>\n  );\n}\n\nconst mapStateToProps = (state: any) => ({\n  state: state,\n  employees: state.employees,\n});\n\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    dispatchAddEmployee: (firstname: string, lastname: string, email: string) =>\n      dispatch(addEmployee(firstname, lastname, email)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const initialState = {\n  employees: [],\n};\n\nconst reducer = (state = initialState, action: any = {}) => {\n  switch (action.type) {\n    case \"ADD_EMPLOYEE\":\n      return {\n        ...state,\n        employees: [...state.employees, action.payload],\n      };\n    case \"REMOVE_EMPLOYEE\":\n      return {\n        ...state,\n        employees: [\n          ...state.employees.slice(0, action.payload),\n          ...state.employees.slice(action.payload + 1),\n        ],\n      };\n    default:\n      return state;\n  }\n};\nexport default reducer;\n","const initialState = {\n  firstname: \"\",\n  lastname: \"\",\n  email: \"\",\n};\n\nconst reducer = (state = initialState, action: any = {}) => {\n  switch (action.type) {\n    case \"SET_FIRSTNAME\":\n      return {\n        ...state,\n        firstname: action.firstname,\n      };\n    case \"SET_LASTNAME\":\n      return {\n        ...state,\n        lastname: action.lastname,\n      };\n    case \"SET_EMAIL\":\n      return {\n        ...state,\n        email: action.email,\n      };\n    default:\n      return state;\n  }\n};\nexport default reducer;\n","import { combineReducers } from \"redux\";\nimport employees from \"./employees\";\nimport form from \"./form\";\n\nexport default combineReducers({\n  employees,\n  form,\n});\n","import rootReducer from \"./reducers\";\nimport { applyMiddleware, compose, createStore } from \"redux\";\nimport { createLogger } from \"redux-logger\";\nimport thunk from \"redux-thunk\";\n\nconst middlewares = [];\nmiddlewares.push(thunk);\n\nif (process.env.NODE_ENV !== \"production\") {\n  const logger = createLogger({\n    collapsed: true,\n    duration: true,\n  });\n  middlewares.push(logger);\n}\n\nexport const store = createStore(\n  rootReducer,\n  compose(applyMiddleware(...middlewares))\n);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./store\";\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}